import { Inject, Injectable } from '@angular/core';
import { Router } from '@angular/router';

import { take } from 'rxjs/operators';
import { Observable } from 'rxjs';


import { User } from '../../../../bricks/src/lib/auth/user.interface';

import { CacheService } from '../../../../../ngfi/angular/src/lib/cache/cache.service';
import { UserService } from '../../../../../ngfi/angular/src/lib/auth/services/user.service';
import { SegmentService } from '../services/segment.service';
import { RouteUtilitiesService } from '../services/route-utilities.service';

import { ROUTE_KEYWORDS } from '../data/route-keywords';

@Injectable({ 'providedIn': 'root' })
export class AnalyticsService {

  user$: Observable<User>;

  constructor(
    private _router: Router,
    private _analytics: SegmentService,
    private _cacheService: CacheService,
    private _userService: UserService<User>,
    private _routeUtilities: RouteUtilitiesService,
    @Inject('ENVIRONMENT') private _env: any) {
    this.user$ = this._userService.getUser().pipe(take(1));
    this._routeUtilities.printpath('', this._router.config, ROUTE_KEYWORDS);
  }

  /**
 * @description Returns the active page with the following signature e.g Home_Page
 */
  getCurrentPage() {
    const currentUrl = this._router.url;
    const pageName = this._routeUtilities.formatRoute(currentUrl).split('/').filter(item => item)[0].toLocaleUpperCase();

    const analyticsUrl = this.getAnalyticsUrl(currentUrl);

    const payload = {
      name: pageName,
      path: this._routeUtilities.formatRoute(analyticsUrl),
      url: analyticsUrl,
      title: pageName,
      referrer: ''
    }

    return payload

  }

  getAnalyticsUrl(url: string) {
    const splitUrl = url.split('/');
    const arr = splitUrl.filter(item => item);
    // for specific pages 
    let count = 0;
    arr.forEach(item => {
      const index = arr.indexOf(item);
      if (!ROUTE_KEYWORDS.includes(item)) {
        count += 1
        if (count == 1) {
          arr[index] = '{propId}' // replace this with something else the point is  to have a constant value replaces url: property/877/ to url property/{propId}/
        }
        if (count == 2) {
          arr[index] = '{gAId}' // replace this with constant value e.g. replaces url: property/877/ to url property/{gAId}/
        }

      }
    })

    const analyticsUrl = arr.join('/');
    return analyticsUrl
  }


  logPage(component: string) {
    if (this._env.production) {
      const currentUrl = this._router.url;
      const pageName = this._routeUtilities.formatRoute(currentUrl).split('/').filter(item => item)[0].toLocaleUpperCase();
      const url = this.getAnalyticsUrl(currentUrl)

      const data = {
        title: `${component}.${pageName}`,
        componentName: component,
        url: url,
        path: this._routeUtilities.formatRoute(url),
      }
      this._analytics.page(pageName, data);
    }
  }



  public logEvent(event: any) {

    if (this._env.production) {
      const page = this.getCurrentPage();

      this.user$.subscribe(user => {
        const userId = user ? user.id : null;
        const userEmail = user ? user.email : null;
        const displayName = user ? user.displayName : null;
        const roles = user ? user.roles : null;

        this._analytics.track(event.name, {
          ...event,
          user_id: userId,
          email: userEmail,
          displayName: displayName,
          roles: roles,
          page: {
            name: page.name,
            title: page.title,
            path: page.path,
            url: page.url
          }
        })
      });

    }

  }


  /**
   * @description Returns the active cached anonymous user generated by segment
   */
  getSegmentAnonymousUserID() {
    return this._cacheService.getValueByKey('ajs_anonymous_id');
  }

  /**
   * @description Returns the active cached user captured by segment
   */
  getSegmentCurrentUserID() {
    return this._cacheService.getValueByKey('ajs_user_id');
  }


  /**
   * @description Function gets active user in the system
   */
  getActiveUser() {
    this.user$.subscribe()
  }

  /**
   * @description Identifies current logged in user with segment
   */
  identifyUser() {
    if (this._env.production) {
      this.user$.subscribe((user: User) => {
        if (user) {
          const cachedUser = this._cacheService.getValueByKey('ajs_user_id');
          if (!cachedUser) {
            const traits = { userId: user.id, email: user.email, displayName: user.displayName }
            this._analytics.identify(user.id, traits);
          }
        }
      });
    }

  };


  /**
   * @description Function checks if we are in prod or dev mode
   */
  isProduction() {
    return this._env.production;
  }



}
